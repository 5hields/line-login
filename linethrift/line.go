// Code generated by Thrift Compiler (0.14.0). DO NOT EDIT.

package linethrift

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = time.Now
var _ = bytes.Equal

type IdentityProvider int64
const (
  IdentityProvider_UNKNOWN IdentityProvider = 0
  IdentityProvider_LINE IdentityProvider = 1
  IdentityProvider_NAVER_KR IdentityProvider = 2
  IdentityProvider_LINE_PHONE IdentityProvider = 3
)

func (p IdentityProvider) String() string {
  switch p {
  case IdentityProvider_UNKNOWN: return "UNKNOWN"
  case IdentityProvider_LINE: return "LINE"
  case IdentityProvider_NAVER_KR: return "NAVER_KR"
  case IdentityProvider_LINE_PHONE: return "LINE_PHONE"
  }
  return "<UNSET>"
}

func IdentityProviderFromString(s string) (IdentityProvider, error) {
  switch s {
  case "UNKNOWN": return IdentityProvider_UNKNOWN, nil 
  case "LINE": return IdentityProvider_LINE, nil 
  case "NAVER_KR": return IdentityProvider_NAVER_KR, nil 
  case "LINE_PHONE": return IdentityProvider_LINE_PHONE, nil 
  }
  return IdentityProvider(0), fmt.Errorf("not a valid IdentityProvider string")
}


func IdentityProviderPtr(v IdentityProvider) *IdentityProvider { return &v }

func (p IdentityProvider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *IdentityProvider) UnmarshalText(text []byte) error {
q, err := IdentityProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *IdentityProvider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = IdentityProvider(v)
return nil
}

func (p * IdentityProvider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type LoginType int64
const (
  LoginType_ID_CREDENTIAL LoginType = 0
  LoginType_QRCODE LoginType = 1
  LoginType_ID_CREDENTIAL_WITH_E2EE LoginType = 2
)

func (p LoginType) String() string {
  switch p {
  case LoginType_ID_CREDENTIAL: return "ID_CREDENTIAL"
  case LoginType_QRCODE: return "QRCODE"
  case LoginType_ID_CREDENTIAL_WITH_E2EE: return "ID_CREDENTIAL_WITH_E2EE"
  }
  return "<UNSET>"
}

func LoginTypeFromString(s string) (LoginType, error) {
  switch s {
  case "ID_CREDENTIAL": return LoginType_ID_CREDENTIAL, nil 
  case "QRCODE": return LoginType_QRCODE, nil 
  case "ID_CREDENTIAL_WITH_E2EE": return LoginType_ID_CREDENTIAL_WITH_E2EE, nil 
  }
  return LoginType(0), fmt.Errorf("not a valid LoginType string")
}


func LoginTypePtr(v LoginType) *LoginType { return &v }

func (p LoginType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *LoginType) UnmarshalText(text []byte) error {
q, err := LoginTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *LoginType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = LoginType(v)
return nil
}

func (p * LoginType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type LoginResultType int64
const (
  LoginResultType_SUCCESS LoginResultType = 1
  LoginResultType_REQUIRE_QRCODE LoginResultType = 2
  LoginResultType_REQUIRE_DEVICE_CONFIRM LoginResultType = 3
  LoginResultType_REQUIRE_SMS_CONFIRM LoginResultType = 4
)

func (p LoginResultType) String() string {
  switch p {
  case LoginResultType_SUCCESS: return "SUCCESS"
  case LoginResultType_REQUIRE_QRCODE: return "REQUIRE_QRCODE"
  case LoginResultType_REQUIRE_DEVICE_CONFIRM: return "REQUIRE_DEVICE_CONFIRM"
  case LoginResultType_REQUIRE_SMS_CONFIRM: return "REQUIRE_SMS_CONFIRM"
  }
  return "<UNSET>"
}

func LoginResultTypeFromString(s string) (LoginResultType, error) {
  switch s {
  case "SUCCESS": return LoginResultType_SUCCESS, nil 
  case "REQUIRE_QRCODE": return LoginResultType_REQUIRE_QRCODE, nil 
  case "REQUIRE_DEVICE_CONFIRM": return LoginResultType_REQUIRE_DEVICE_CONFIRM, nil 
  case "REQUIRE_SMS_CONFIRM": return LoginResultType_REQUIRE_SMS_CONFIRM, nil 
  }
  return LoginResultType(0), fmt.Errorf("not a valid LoginResultType string")
}


func LoginResultTypePtr(v LoginResultType) *LoginResultType { return &v }

func (p LoginResultType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *LoginResultType) UnmarshalText(text []byte) error {
q, err := LoginResultTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *LoginResultType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = LoginResultType(v)
return nil
}

func (p * LoginResultType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type VerificationMethod int64
const (
  VerificationMethod_NO_AVAILABLE VerificationMethod = 0
  VerificationMethod_PIN_VIA_SMS VerificationMethod = 1
  VerificationMethod_CALLERID_INDIGO VerificationMethod = 2
  VerificationMethod_PIN_VIA_TTS VerificationMethod = 4
  VerificationMethod_SKIP VerificationMethod = 10
)

func (p VerificationMethod) String() string {
  switch p {
  case VerificationMethod_NO_AVAILABLE: return "NO_AVAILABLE"
  case VerificationMethod_PIN_VIA_SMS: return "PIN_VIA_SMS"
  case VerificationMethod_CALLERID_INDIGO: return "CALLERID_INDIGO"
  case VerificationMethod_PIN_VIA_TTS: return "PIN_VIA_TTS"
  case VerificationMethod_SKIP: return "SKIP"
  }
  return "<UNSET>"
}

func VerificationMethodFromString(s string) (VerificationMethod, error) {
  switch s {
  case "NO_AVAILABLE": return VerificationMethod_NO_AVAILABLE, nil 
  case "PIN_VIA_SMS": return VerificationMethod_PIN_VIA_SMS, nil 
  case "CALLERID_INDIGO": return VerificationMethod_CALLERID_INDIGO, nil 
  case "PIN_VIA_TTS": return VerificationMethod_PIN_VIA_TTS, nil 
  case "SKIP": return VerificationMethod_SKIP, nil 
  }
  return VerificationMethod(0), fmt.Errorf("not a valid VerificationMethod string")
}


func VerificationMethodPtr(v VerificationMethod) *VerificationMethod { return &v }

func (p VerificationMethod) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *VerificationMethod) UnmarshalText(text []byte) error {
q, err := VerificationMethodFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *VerificationMethod) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = VerificationMethod(v)
return nil
}

func (p * VerificationMethod) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ErrorCode int64
const (
  ErrorCode_ILLEGAL_ARGUMENT ErrorCode = 0
  ErrorCode_AUTHENTICATION_FAILED ErrorCode = 1
  ErrorCode_DB_FAILED ErrorCode = 2
  ErrorCode_INVALID_STATE ErrorCode = 3
  ErrorCode_EXCESSIVE_ACCESS ErrorCode = 4
  ErrorCode_NOT_FOUND ErrorCode = 5
  ErrorCode_INVALID_LENGTH ErrorCode = 6
  ErrorCode_NOT_AVAILABLE_USER ErrorCode = 7
  ErrorCode_NOT_AUTHORIZED_DEVICE ErrorCode = 8
  ErrorCode_INVALID_MID ErrorCode = 9
  ErrorCode_NOT_A_MEMBER ErrorCode = 10
  ErrorCode_INCOMPATIBLE_APP_VERSION ErrorCode = 11
  ErrorCode_NOT_READY ErrorCode = 12
  ErrorCode_NOT_AVAILABLE_SESSION ErrorCode = 13
  ErrorCode_NOT_AUTHORIZED_SESSION ErrorCode = 14
  ErrorCode_SYSTEM_ERROR ErrorCode = 15
  ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD ErrorCode = 16
  ErrorCode_NOT_AUTHENTICATED ErrorCode = 17
  ErrorCode_INVALID_IDENTITY_CREDENTIAL ErrorCode = 18
  ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER ErrorCode = 19
  ErrorCode_INTERNAL_ERROR ErrorCode = 20
  ErrorCode_NO_SUCH_IDENTITY_IDENFIER ErrorCode = 21
  ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY ErrorCode = 22
  ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL ErrorCode = 23
  ErrorCode_UNKNOWN_CHANNEL ErrorCode = 24
  ErrorCode_NO_SUCH_MESSAGE_BOX ErrorCode = 25
  ErrorCode_NOT_AVAILABLE_MESSAGE_BOX ErrorCode = 26
  ErrorCode_CHANNEL_DOES_NOT_MATCH ErrorCode = 27
  ErrorCode_NOT_YOUR_MESSAGE ErrorCode = 28
  ErrorCode_MESSAGE_DEFINED_ERROR ErrorCode = 29
  ErrorCode_USER_CANNOT_ACCEPT_PRESENTS ErrorCode = 30
  ErrorCode_USER_NOT_STICKER_OWNER ErrorCode = 32
  ErrorCode_MAINTENANCE_ERROR ErrorCode = 33
  ErrorCode_ACCOUNT_NOT_MATCHED ErrorCode = 34
  ErrorCode_ABUSE_BLOCK ErrorCode = 35
  ErrorCode_NOT_FRIEND ErrorCode = 36
  ErrorCode_NOT_ALLOWED_CALL ErrorCode = 37
  ErrorCode_BLOCK_FRIEND ErrorCode = 38
  ErrorCode_INCOMPATIBLE_VOIP_VERSION ErrorCode = 39
  ErrorCode_INVALID_SNS_ACCESS_TOKEN ErrorCode = 40
  ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE ErrorCode = 41
  ErrorCode_NOT_ALLOWED_ADD_CONTACT ErrorCode = 42
  ErrorCode_NOT_CERTIFICATED ErrorCode = 43
  ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE ErrorCode = 44
  ErrorCode_INVALID_PIN_CODE ErrorCode = 45
  ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL ErrorCode = 46
  ErrorCode_EXCEED_FILE_MAX_SIZE ErrorCode = 47
  ErrorCode_EXCEED_DAILY_QUOTA ErrorCode = 48
  ErrorCode_NOT_SUPPORT_SEND_FILE ErrorCode = 49
  ErrorCode_MUST_UPGRADE ErrorCode = 50
  ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION ErrorCode = 51
  ErrorCode_EXPIRED_REVISION ErrorCode = 52
  ErrorCode_NOT_YET_PHONE_NUMBER ErrorCode = 54
  ErrorCode_BAD_CALL_NUMBER ErrorCode = 55
  ErrorCode_UNAVAILABLE_CALL_NUMBER ErrorCode = 56
  ErrorCode_NOT_SUPPORT_CALL_SERVICE ErrorCode = 57
  ErrorCode_CONGESTION_CONTROL ErrorCode = 58
  ErrorCode_NO_BALANCE ErrorCode = 59
  ErrorCode_NOT_PERMITTED_CALLER_ID ErrorCode = 60
  ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED ErrorCode = 61
  ErrorCode_CALLER_ID_VERIFICATION_REQUIRED ErrorCode = 62
  ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED ErrorCode = 63
  ErrorCode_MESSAGE_NOT_FOUND ErrorCode = 64
  ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT ErrorCode = 65
  ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED ErrorCode = 66
  ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED ErrorCode = 67
  ErrorCode_INVALID_PASSWORD_FORMAT ErrorCode = 69
  ErrorCode_FEATURE_RESTRICTED ErrorCode = 70
  ErrorCode_MESSAGE_NOT_DESTRUCTIBLE ErrorCode = 71
  ErrorCode_PAID_CALL_REDEEM_FAILED ErrorCode = 72
  ErrorCode_PREVENTED_JOIN_BY_TICKET ErrorCode = 73
  ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT ErrorCode = 75
  ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY ErrorCode = 76
  ErrorCode_SECURITY_CENTER_NOT_VERIFIED ErrorCode = 77
  ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING ErrorCode = 78
  ErrorCode_SECURITY_CENTER_BLOCKED ErrorCode = 79
  ErrorCode_TALK_PROXY_EXCEPTION ErrorCode = 80
  ErrorCode_E2EE_INVALID_PROTOCOL ErrorCode = 81
  ErrorCode_E2EE_RETRY_ENCRYPT ErrorCode = 82
  ErrorCode_E2EE_UPDATE_SENDER_KEY ErrorCode = 83
  ErrorCode_E2EE_UPDATE_RECEIVER_KEY ErrorCode = 84
  ErrorCode_E2EE_INVALID_ARGUMENT ErrorCode = 85
  ErrorCode_E2EE_INVALID_VERSION ErrorCode = 86
  ErrorCode_E2EE_SENDER_DISABLED ErrorCode = 87
  ErrorCode_E2EE_RECEIVER_DISABLED ErrorCode = 88
  ErrorCode_E2EE_SENDER_NOT_ALLOWED ErrorCode = 89
  ErrorCode_E2EE_RECEIVER_NOT_ALLOWED ErrorCode = 90
  ErrorCode_E2EE_RESEND_FAIL ErrorCode = 91
  ErrorCode_E2EE_RESEND_OK ErrorCode = 92
  ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA ErrorCode = 93
  ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE ErrorCode = 94
  ErrorCode_SUCCESS ErrorCode = 95
  ErrorCode_CANCEL ErrorCode = 96
  ErrorCode_E2EE_PRIMARY_NOT_SUPPORT ErrorCode = 97
  ErrorCode_E2EE_RETRY_PLAIN ErrorCode = 98
  ErrorCode_E2EE_RECREATE_GROUP_KEY ErrorCode = 99
  ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS ErrorCode = 100
  ErrorCode_SERVER_BUSY ErrorCode = 101
  ErrorCode_NOT_ALLOWED_ADD_FOLLOW ErrorCode = 102
  ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT ErrorCode = 103
  ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT ErrorCode = 104
  ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA ErrorCode = 105
  ErrorCode_DUPLICATED ErrorCode = 106
  ErrorCode_BANNED ErrorCode = 107
  ErrorCode_NOT_AN_INVITEE ErrorCode = 108
  ErrorCode_NOT_AN_OUTSIDER ErrorCode = 109
  ErrorCode_EMPTY_GROUP ErrorCode = 111
  ErrorCode_EXCEED_FOLLOW_LIMIT ErrorCode = 112
  ErrorCode_UNSUPPORTED_ACCOUNT_TYPE ErrorCode = 113
  ErrorCode_AGREEMENT_REQUIRED ErrorCode = 114
  ErrorCode_SHOULD_RETRY ErrorCode = 115
  ErrorCode_OVER_MAX_CHATS_PER_USER ErrorCode = 116
  ErrorCode_NOT_AVAILABLE_API ErrorCode = 117
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case ErrorCode_AUTHENTICATION_FAILED: return "AUTHENTICATION_FAILED"
  case ErrorCode_DB_FAILED: return "DB_FAILED"
  case ErrorCode_INVALID_STATE: return "INVALID_STATE"
  case ErrorCode_EXCESSIVE_ACCESS: return "EXCESSIVE_ACCESS"
  case ErrorCode_NOT_FOUND: return "NOT_FOUND"
  case ErrorCode_INVALID_LENGTH: return "INVALID_LENGTH"
  case ErrorCode_NOT_AVAILABLE_USER: return "NOT_AVAILABLE_USER"
  case ErrorCode_NOT_AUTHORIZED_DEVICE: return "NOT_AUTHORIZED_DEVICE"
  case ErrorCode_INVALID_MID: return "INVALID_MID"
  case ErrorCode_NOT_A_MEMBER: return "NOT_A_MEMBER"
  case ErrorCode_INCOMPATIBLE_APP_VERSION: return "INCOMPATIBLE_APP_VERSION"
  case ErrorCode_NOT_READY: return "NOT_READY"
  case ErrorCode_NOT_AVAILABLE_SESSION: return "NOT_AVAILABLE_SESSION"
  case ErrorCode_NOT_AUTHORIZED_SESSION: return "NOT_AUTHORIZED_SESSION"
  case ErrorCode_SYSTEM_ERROR: return "SYSTEM_ERROR"
  case ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD: return "NO_AVAILABLE_VERIFICATION_METHOD"
  case ErrorCode_NOT_AUTHENTICATED: return "NOT_AUTHENTICATED"
  case ErrorCode_INVALID_IDENTITY_CREDENTIAL: return "INVALID_IDENTITY_CREDENTIAL"
  case ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER: return "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
  case ErrorCode_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case ErrorCode_NO_SUCH_IDENTITY_IDENFIER: return "NO_SUCH_IDENTITY_IDENFIER"
  case ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY: return "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
  case ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL: return "ILLEGAL_IDENTITY_CREDENTIAL"
  case ErrorCode_UNKNOWN_CHANNEL: return "UNKNOWN_CHANNEL"
  case ErrorCode_NO_SUCH_MESSAGE_BOX: return "NO_SUCH_MESSAGE_BOX"
  case ErrorCode_NOT_AVAILABLE_MESSAGE_BOX: return "NOT_AVAILABLE_MESSAGE_BOX"
  case ErrorCode_CHANNEL_DOES_NOT_MATCH: return "CHANNEL_DOES_NOT_MATCH"
  case ErrorCode_NOT_YOUR_MESSAGE: return "NOT_YOUR_MESSAGE"
  case ErrorCode_MESSAGE_DEFINED_ERROR: return "MESSAGE_DEFINED_ERROR"
  case ErrorCode_USER_CANNOT_ACCEPT_PRESENTS: return "USER_CANNOT_ACCEPT_PRESENTS"
  case ErrorCode_USER_NOT_STICKER_OWNER: return "USER_NOT_STICKER_OWNER"
  case ErrorCode_MAINTENANCE_ERROR: return "MAINTENANCE_ERROR"
  case ErrorCode_ACCOUNT_NOT_MATCHED: return "ACCOUNT_NOT_MATCHED"
  case ErrorCode_ABUSE_BLOCK: return "ABUSE_BLOCK"
  case ErrorCode_NOT_FRIEND: return "NOT_FRIEND"
  case ErrorCode_NOT_ALLOWED_CALL: return "NOT_ALLOWED_CALL"
  case ErrorCode_BLOCK_FRIEND: return "BLOCK_FRIEND"
  case ErrorCode_INCOMPATIBLE_VOIP_VERSION: return "INCOMPATIBLE_VOIP_VERSION"
  case ErrorCode_INVALID_SNS_ACCESS_TOKEN: return "INVALID_SNS_ACCESS_TOKEN"
  case ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE: return "EXTERNAL_SERVICE_NOT_AVAILABLE"
  case ErrorCode_NOT_ALLOWED_ADD_CONTACT: return "NOT_ALLOWED_ADD_CONTACT"
  case ErrorCode_NOT_CERTIFICATED: return "NOT_CERTIFICATED"
  case ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE: return "NOT_ALLOWED_SECONDARY_DEVICE"
  case ErrorCode_INVALID_PIN_CODE: return "INVALID_PIN_CODE"
  case ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL: return "NOT_FOUND_IDENTITY_CREDENTIAL"
  case ErrorCode_EXCEED_FILE_MAX_SIZE: return "EXCEED_FILE_MAX_SIZE"
  case ErrorCode_EXCEED_DAILY_QUOTA: return "EXCEED_DAILY_QUOTA"
  case ErrorCode_NOT_SUPPORT_SEND_FILE: return "NOT_SUPPORT_SEND_FILE"
  case ErrorCode_MUST_UPGRADE: return "MUST_UPGRADE"
  case ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION: return "NOT_AVAILABLE_PIN_CODE_SESSION"
  case ErrorCode_EXPIRED_REVISION: return "EXPIRED_REVISION"
  case ErrorCode_NOT_YET_PHONE_NUMBER: return "NOT_YET_PHONE_NUMBER"
  case ErrorCode_BAD_CALL_NUMBER: return "BAD_CALL_NUMBER"
  case ErrorCode_UNAVAILABLE_CALL_NUMBER: return "UNAVAILABLE_CALL_NUMBER"
  case ErrorCode_NOT_SUPPORT_CALL_SERVICE: return "NOT_SUPPORT_CALL_SERVICE"
  case ErrorCode_CONGESTION_CONTROL: return "CONGESTION_CONTROL"
  case ErrorCode_NO_BALANCE: return "NO_BALANCE"
  case ErrorCode_NOT_PERMITTED_CALLER_ID: return "NOT_PERMITTED_CALLER_ID"
  case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED: return "NO_CALLER_ID_LIMIT_EXCEEDED"
  case ErrorCode_CALLER_ID_VERIFICATION_REQUIRED: return "CALLER_ID_VERIFICATION_REQUIRED"
  case ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED: return "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
  case ErrorCode_MESSAGE_NOT_FOUND: return "MESSAGE_NOT_FOUND"
  case ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT: return "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
  case ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED: return "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
  case ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED: return "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
  case ErrorCode_INVALID_PASSWORD_FORMAT: return "INVALID_PASSWORD_FORMAT"
  case ErrorCode_FEATURE_RESTRICTED: return "FEATURE_RESTRICTED"
  case ErrorCode_MESSAGE_NOT_DESTRUCTIBLE: return "MESSAGE_NOT_DESTRUCTIBLE"
  case ErrorCode_PAID_CALL_REDEEM_FAILED: return "PAID_CALL_REDEEM_FAILED"
  case ErrorCode_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT: return "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT"
  case ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY: return "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
  case ErrorCode_SECURITY_CENTER_NOT_VERIFIED: return "SECURITY_CENTER_NOT_VERIFIED"
  case ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING: return "SECURITY_CENTER_BLOCKED_BY_SETTING"
  case ErrorCode_SECURITY_CENTER_BLOCKED: return "SECURITY_CENTER_BLOCKED"
  case ErrorCode_TALK_PROXY_EXCEPTION: return "TALK_PROXY_EXCEPTION"
  case ErrorCode_E2EE_INVALID_PROTOCOL: return "E2EE_INVALID_PROTOCOL"
  case ErrorCode_E2EE_RETRY_ENCRYPT: return "E2EE_RETRY_ENCRYPT"
  case ErrorCode_E2EE_UPDATE_SENDER_KEY: return "E2EE_UPDATE_SENDER_KEY"
  case ErrorCode_E2EE_UPDATE_RECEIVER_KEY: return "E2EE_UPDATE_RECEIVER_KEY"
  case ErrorCode_E2EE_INVALID_ARGUMENT: return "E2EE_INVALID_ARGUMENT"
  case ErrorCode_E2EE_INVALID_VERSION: return "E2EE_INVALID_VERSION"
  case ErrorCode_E2EE_SENDER_DISABLED: return "E2EE_SENDER_DISABLED"
  case ErrorCode_E2EE_RECEIVER_DISABLED: return "E2EE_RECEIVER_DISABLED"
  case ErrorCode_E2EE_SENDER_NOT_ALLOWED: return "E2EE_SENDER_NOT_ALLOWED"
  case ErrorCode_E2EE_RECEIVER_NOT_ALLOWED: return "E2EE_RECEIVER_NOT_ALLOWED"
  case ErrorCode_E2EE_RESEND_FAIL: return "E2EE_RESEND_FAIL"
  case ErrorCode_E2EE_RESEND_OK: return "E2EE_RESEND_OK"
  case ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA: return "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
  case ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE: return "E2EE_UPDATE_PRIMARY_DEVICE"
  case ErrorCode_SUCCESS: return "SUCCESS"
  case ErrorCode_CANCEL: return "CANCEL"
  case ErrorCode_E2EE_PRIMARY_NOT_SUPPORT: return "E2EE_PRIMARY_NOT_SUPPORT"
  case ErrorCode_E2EE_RETRY_PLAIN: return "E2EE_RETRY_PLAIN"
  case ErrorCode_E2EE_RECREATE_GROUP_KEY: return "E2EE_RECREATE_GROUP_KEY"
  case ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS: return "E2EE_GROUP_TOO_MANY_MEMBERS"
  case ErrorCode_SERVER_BUSY: return "SERVER_BUSY"
  case ErrorCode_NOT_ALLOWED_ADD_FOLLOW: return "NOT_ALLOWED_ADD_FOLLOW"
  case ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT: return "INCOMING_FRIEND_REQUEST_LIMIT"
  case ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT: return "OUTGOING_FRIEND_REQUEST_LIMIT"
  case ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA: return "OUTGOING_FRIEND_REQUEST_QUOTA"
  case ErrorCode_DUPLICATED: return "DUPLICATED"
  case ErrorCode_BANNED: return "BANNED"
  case ErrorCode_NOT_AN_INVITEE: return "NOT_AN_INVITEE"
  case ErrorCode_NOT_AN_OUTSIDER: return "NOT_AN_OUTSIDER"
  case ErrorCode_EMPTY_GROUP: return "EMPTY_GROUP"
  case ErrorCode_EXCEED_FOLLOW_LIMIT: return "EXCEED_FOLLOW_LIMIT"
  case ErrorCode_UNSUPPORTED_ACCOUNT_TYPE: return "UNSUPPORTED_ACCOUNT_TYPE"
  case ErrorCode_AGREEMENT_REQUIRED: return "AGREEMENT_REQUIRED"
  case ErrorCode_SHOULD_RETRY: return "SHOULD_RETRY"
  case ErrorCode_OVER_MAX_CHATS_PER_USER: return "OVER_MAX_CHATS_PER_USER"
  case ErrorCode_NOT_AVAILABLE_API: return "NOT_AVAILABLE_API"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "ILLEGAL_ARGUMENT": return ErrorCode_ILLEGAL_ARGUMENT, nil 
  case "AUTHENTICATION_FAILED": return ErrorCode_AUTHENTICATION_FAILED, nil 
  case "DB_FAILED": return ErrorCode_DB_FAILED, nil 
  case "INVALID_STATE": return ErrorCode_INVALID_STATE, nil 
  case "EXCESSIVE_ACCESS": return ErrorCode_EXCESSIVE_ACCESS, nil 
  case "NOT_FOUND": return ErrorCode_NOT_FOUND, nil 
  case "INVALID_LENGTH": return ErrorCode_INVALID_LENGTH, nil 
  case "NOT_AVAILABLE_USER": return ErrorCode_NOT_AVAILABLE_USER, nil 
  case "NOT_AUTHORIZED_DEVICE": return ErrorCode_NOT_AUTHORIZED_DEVICE, nil 
  case "INVALID_MID": return ErrorCode_INVALID_MID, nil 
  case "NOT_A_MEMBER": return ErrorCode_NOT_A_MEMBER, nil 
  case "INCOMPATIBLE_APP_VERSION": return ErrorCode_INCOMPATIBLE_APP_VERSION, nil 
  case "NOT_READY": return ErrorCode_NOT_READY, nil 
  case "NOT_AVAILABLE_SESSION": return ErrorCode_NOT_AVAILABLE_SESSION, nil 
  case "NOT_AUTHORIZED_SESSION": return ErrorCode_NOT_AUTHORIZED_SESSION, nil 
  case "SYSTEM_ERROR": return ErrorCode_SYSTEM_ERROR, nil 
  case "NO_AVAILABLE_VERIFICATION_METHOD": return ErrorCode_NO_AVAILABLE_VERIFICATION_METHOD, nil 
  case "NOT_AUTHENTICATED": return ErrorCode_NOT_AUTHENTICATED, nil 
  case "INVALID_IDENTITY_CREDENTIAL": return ErrorCode_INVALID_IDENTITY_CREDENTIAL, nil 
  case "NOT_AVAILABLE_IDENTITY_IDENTIFIER": return ErrorCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil 
  case "INTERNAL_ERROR": return ErrorCode_INTERNAL_ERROR, nil 
  case "NO_SUCH_IDENTITY_IDENFIER": return ErrorCode_NO_SUCH_IDENTITY_IDENFIER, nil 
  case "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": return ErrorCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil 
  case "ILLEGAL_IDENTITY_CREDENTIAL": return ErrorCode_ILLEGAL_IDENTITY_CREDENTIAL, nil 
  case "UNKNOWN_CHANNEL": return ErrorCode_UNKNOWN_CHANNEL, nil 
  case "NO_SUCH_MESSAGE_BOX": return ErrorCode_NO_SUCH_MESSAGE_BOX, nil 
  case "NOT_AVAILABLE_MESSAGE_BOX": return ErrorCode_NOT_AVAILABLE_MESSAGE_BOX, nil 
  case "CHANNEL_DOES_NOT_MATCH": return ErrorCode_CHANNEL_DOES_NOT_MATCH, nil 
  case "NOT_YOUR_MESSAGE": return ErrorCode_NOT_YOUR_MESSAGE, nil 
  case "MESSAGE_DEFINED_ERROR": return ErrorCode_MESSAGE_DEFINED_ERROR, nil 
  case "USER_CANNOT_ACCEPT_PRESENTS": return ErrorCode_USER_CANNOT_ACCEPT_PRESENTS, nil 
  case "USER_NOT_STICKER_OWNER": return ErrorCode_USER_NOT_STICKER_OWNER, nil 
  case "MAINTENANCE_ERROR": return ErrorCode_MAINTENANCE_ERROR, nil 
  case "ACCOUNT_NOT_MATCHED": return ErrorCode_ACCOUNT_NOT_MATCHED, nil 
  case "ABUSE_BLOCK": return ErrorCode_ABUSE_BLOCK, nil 
  case "NOT_FRIEND": return ErrorCode_NOT_FRIEND, nil 
  case "NOT_ALLOWED_CALL": return ErrorCode_NOT_ALLOWED_CALL, nil 
  case "BLOCK_FRIEND": return ErrorCode_BLOCK_FRIEND, nil 
  case "INCOMPATIBLE_VOIP_VERSION": return ErrorCode_INCOMPATIBLE_VOIP_VERSION, nil 
  case "INVALID_SNS_ACCESS_TOKEN": return ErrorCode_INVALID_SNS_ACCESS_TOKEN, nil 
  case "EXTERNAL_SERVICE_NOT_AVAILABLE": return ErrorCode_EXTERNAL_SERVICE_NOT_AVAILABLE, nil 
  case "NOT_ALLOWED_ADD_CONTACT": return ErrorCode_NOT_ALLOWED_ADD_CONTACT, nil 
  case "NOT_CERTIFICATED": return ErrorCode_NOT_CERTIFICATED, nil 
  case "NOT_ALLOWED_SECONDARY_DEVICE": return ErrorCode_NOT_ALLOWED_SECONDARY_DEVICE, nil 
  case "INVALID_PIN_CODE": return ErrorCode_INVALID_PIN_CODE, nil 
  case "NOT_FOUND_IDENTITY_CREDENTIAL": return ErrorCode_NOT_FOUND_IDENTITY_CREDENTIAL, nil 
  case "EXCEED_FILE_MAX_SIZE": return ErrorCode_EXCEED_FILE_MAX_SIZE, nil 
  case "EXCEED_DAILY_QUOTA": return ErrorCode_EXCEED_DAILY_QUOTA, nil 
  case "NOT_SUPPORT_SEND_FILE": return ErrorCode_NOT_SUPPORT_SEND_FILE, nil 
  case "MUST_UPGRADE": return ErrorCode_MUST_UPGRADE, nil 
  case "NOT_AVAILABLE_PIN_CODE_SESSION": return ErrorCode_NOT_AVAILABLE_PIN_CODE_SESSION, nil 
  case "EXPIRED_REVISION": return ErrorCode_EXPIRED_REVISION, nil 
  case "NOT_YET_PHONE_NUMBER": return ErrorCode_NOT_YET_PHONE_NUMBER, nil 
  case "BAD_CALL_NUMBER": return ErrorCode_BAD_CALL_NUMBER, nil 
  case "UNAVAILABLE_CALL_NUMBER": return ErrorCode_UNAVAILABLE_CALL_NUMBER, nil 
  case "NOT_SUPPORT_CALL_SERVICE": return ErrorCode_NOT_SUPPORT_CALL_SERVICE, nil 
  case "CONGESTION_CONTROL": return ErrorCode_CONGESTION_CONTROL, nil 
  case "NO_BALANCE": return ErrorCode_NO_BALANCE, nil 
  case "NOT_PERMITTED_CALLER_ID": return ErrorCode_NOT_PERMITTED_CALLER_ID, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED": return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED, nil 
  case "CALLER_ID_VERIFICATION_REQUIRED": return ErrorCode_CALLER_ID_VERIFICATION_REQUIRED, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": return ErrorCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, nil 
  case "MESSAGE_NOT_FOUND": return ErrorCode_MESSAGE_NOT_FOUND, nil 
  case "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": return ErrorCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, nil 
  case "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": return ErrorCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, nil 
  case "ACCOUNT_MIGRATION_PINCODE_BLOCKED": return ErrorCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED, nil 
  case "INVALID_PASSWORD_FORMAT": return ErrorCode_INVALID_PASSWORD_FORMAT, nil 
  case "FEATURE_RESTRICTED": return ErrorCode_FEATURE_RESTRICTED, nil 
  case "MESSAGE_NOT_DESTRUCTIBLE": return ErrorCode_MESSAGE_NOT_DESTRUCTIBLE, nil 
  case "PAID_CALL_REDEEM_FAILED": return ErrorCode_PAID_CALL_REDEEM_FAILED, nil 
  case "PREVENTED_JOIN_BY_TICKET": return ErrorCode_PREVENTED_JOIN_BY_TICKET, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": return ErrorCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": return ErrorCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, nil 
  case "SECURITY_CENTER_NOT_VERIFIED": return ErrorCode_SECURITY_CENTER_NOT_VERIFIED, nil 
  case "SECURITY_CENTER_BLOCKED_BY_SETTING": return ErrorCode_SECURITY_CENTER_BLOCKED_BY_SETTING, nil 
  case "SECURITY_CENTER_BLOCKED": return ErrorCode_SECURITY_CENTER_BLOCKED, nil 
  case "TALK_PROXY_EXCEPTION": return ErrorCode_TALK_PROXY_EXCEPTION, nil 
  case "E2EE_INVALID_PROTOCOL": return ErrorCode_E2EE_INVALID_PROTOCOL, nil 
  case "E2EE_RETRY_ENCRYPT": return ErrorCode_E2EE_RETRY_ENCRYPT, nil 
  case "E2EE_UPDATE_SENDER_KEY": return ErrorCode_E2EE_UPDATE_SENDER_KEY, nil 
  case "E2EE_UPDATE_RECEIVER_KEY": return ErrorCode_E2EE_UPDATE_RECEIVER_KEY, nil 
  case "E2EE_INVALID_ARGUMENT": return ErrorCode_E2EE_INVALID_ARGUMENT, nil 
  case "E2EE_INVALID_VERSION": return ErrorCode_E2EE_INVALID_VERSION, nil 
  case "E2EE_SENDER_DISABLED": return ErrorCode_E2EE_SENDER_DISABLED, nil 
  case "E2EE_RECEIVER_DISABLED": return ErrorCode_E2EE_RECEIVER_DISABLED, nil 
  case "E2EE_SENDER_NOT_ALLOWED": return ErrorCode_E2EE_SENDER_NOT_ALLOWED, nil 
  case "E2EE_RECEIVER_NOT_ALLOWED": return ErrorCode_E2EE_RECEIVER_NOT_ALLOWED, nil 
  case "E2EE_RESEND_FAIL": return ErrorCode_E2EE_RESEND_FAIL, nil 
  case "E2EE_RESEND_OK": return ErrorCode_E2EE_RESEND_OK, nil 
  case "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": return ErrorCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA, nil 
  case "E2EE_UPDATE_PRIMARY_DEVICE": return ErrorCode_E2EE_UPDATE_PRIMARY_DEVICE, nil 
  case "SUCCESS": return ErrorCode_SUCCESS, nil 
  case "CANCEL": return ErrorCode_CANCEL, nil 
  case "E2EE_PRIMARY_NOT_SUPPORT": return ErrorCode_E2EE_PRIMARY_NOT_SUPPORT, nil 
  case "E2EE_RETRY_PLAIN": return ErrorCode_E2EE_RETRY_PLAIN, nil 
  case "E2EE_RECREATE_GROUP_KEY": return ErrorCode_E2EE_RECREATE_GROUP_KEY, nil 
  case "E2EE_GROUP_TOO_MANY_MEMBERS": return ErrorCode_E2EE_GROUP_TOO_MANY_MEMBERS, nil 
  case "SERVER_BUSY": return ErrorCode_SERVER_BUSY, nil 
  case "NOT_ALLOWED_ADD_FOLLOW": return ErrorCode_NOT_ALLOWED_ADD_FOLLOW, nil 
  case "INCOMING_FRIEND_REQUEST_LIMIT": return ErrorCode_INCOMING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_LIMIT": return ErrorCode_OUTGOING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_QUOTA": return ErrorCode_OUTGOING_FRIEND_REQUEST_QUOTA, nil 
  case "DUPLICATED": return ErrorCode_DUPLICATED, nil 
  case "BANNED": return ErrorCode_BANNED, nil 
  case "NOT_AN_INVITEE": return ErrorCode_NOT_AN_INVITEE, nil 
  case "NOT_AN_OUTSIDER": return ErrorCode_NOT_AN_OUTSIDER, nil 
  case "EMPTY_GROUP": return ErrorCode_EMPTY_GROUP, nil 
  case "EXCEED_FOLLOW_LIMIT": return ErrorCode_EXCEED_FOLLOW_LIMIT, nil 
  case "UNSUPPORTED_ACCOUNT_TYPE": return ErrorCode_UNSUPPORTED_ACCOUNT_TYPE, nil 
  case "AGREEMENT_REQUIRED": return ErrorCode_AGREEMENT_REQUIRED, nil 
  case "SHOULD_RETRY": return ErrorCode_SHOULD_RETRY, nil 
  case "OVER_MAX_CHATS_PER_USER": return ErrorCode_OVER_MAX_CHATS_PER_USER, nil 
  case "NOT_AVAILABLE_API": return ErrorCode_NOT_AVAILABLE_API, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Keynm
//  - Nvalue
//  - Evalue
//  - SessionKey
type RSAKey struct {
  Keynm string `thrift:"keynm,1" db:"keynm" json:"keynm"`
  Nvalue string `thrift:"nvalue,2" db:"nvalue" json:"nvalue"`
  Evalue string `thrift:"evalue,3" db:"evalue" json:"evalue"`
  SessionKey string `thrift:"sessionKey,4" db:"sessionKey" json:"sessionKey"`
}

func NewRSAKey() *RSAKey {
  return &RSAKey{}
}


func (p *RSAKey) GetKeynm() string {
  return p.Keynm
}

func (p *RSAKey) GetNvalue() string {
  return p.Nvalue
}

func (p *RSAKey) GetEvalue() string {
  return p.Evalue
}

func (p *RSAKey) GetSessionKey() string {
  return p.SessionKey
}
func (p *RSAKey) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RSAKey)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Keynm = v
}
  return nil
}

func (p *RSAKey)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nvalue = v
}
  return nil
}

func (p *RSAKey)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Evalue = v
}
  return nil
}

func (p *RSAKey)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionKey = v
}
  return nil
}

func (p *RSAKey) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RSAKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RSAKey) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keynm", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keynm: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Keynm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keynm (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keynm: ", p), err) }
  return err
}

func (p *RSAKey) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nvalue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nvalue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Nvalue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nvalue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nvalue: ", p), err) }
  return err
}

func (p *RSAKey) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "evalue", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:evalue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Evalue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.evalue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:evalue: ", p), err) }
  return err
}

func (p *RSAKey) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionKey", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionKey (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionKey: ", p), err) }
  return err
}

func (p *RSAKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RSAKey(%+v)", *p)
}

// Attributes:
//  - Type
//  - IdentityProvider
//  - Identifier
//  - Password
//  - KeepLoggedIn
//  - AccessLocation
//  - SystemName
//  - Certificate
//  - Verifier
//  - Secret
//  - E2eeVersion
type LoginRequest struct {
  Type LoginType `thrift:"type,1" db:"type" json:"type"`
  IdentityProvider IdentityProvider `thrift:"identityProvider,2" db:"identityProvider" json:"identityProvider"`
  Identifier string `thrift:"identifier,3" db:"identifier" json:"identifier"`
  Password string `thrift:"password,4" db:"password" json:"password"`
  KeepLoggedIn bool `thrift:"keepLoggedIn,5" db:"keepLoggedIn" json:"keepLoggedIn"`
  AccessLocation string `thrift:"accessLocation,6" db:"accessLocation" json:"accessLocation"`
  SystemName string `thrift:"systemName,7" db:"systemName" json:"systemName"`
  Certificate string `thrift:"certificate,8" db:"certificate" json:"certificate"`
  Verifier string `thrift:"verifier,9" db:"verifier" json:"verifier"`
  Secret []byte `thrift:"secret,10" db:"secret" json:"secret"`
  E2eeVersion int32 `thrift:"e2eeVersion,11" db:"e2eeVersion" json:"e2eeVersion"`
}

func NewLoginRequest() *LoginRequest {
  return &LoginRequest{}
}


func (p *LoginRequest) GetType() LoginType {
  return p.Type
}

func (p *LoginRequest) GetIdentityProvider() IdentityProvider {
  return p.IdentityProvider
}

func (p *LoginRequest) GetIdentifier() string {
  return p.Identifier
}

func (p *LoginRequest) GetPassword() string {
  return p.Password
}

func (p *LoginRequest) GetKeepLoggedIn() bool {
  return p.KeepLoggedIn
}

func (p *LoginRequest) GetAccessLocation() string {
  return p.AccessLocation
}

func (p *LoginRequest) GetSystemName() string {
  return p.SystemName
}

func (p *LoginRequest) GetCertificate() string {
  return p.Certificate
}

func (p *LoginRequest) GetVerifier() string {
  return p.Verifier
}

func (p *LoginRequest) GetSecret() []byte {
  return p.Secret
}

func (p *LoginRequest) GetE2eeVersion() int32 {
  return p.E2eeVersion
}
func (p *LoginRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := LoginType(v)
  p.Type = temp
}
  return nil
}

func (p *LoginRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := IdentityProvider(v)
  p.IdentityProvider = temp
}
  return nil
}

func (p *LoginRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *LoginRequest)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *LoginRequest)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.KeepLoggedIn = v
}
  return nil
}

func (p *LoginRequest)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AccessLocation = v
}
  return nil
}

func (p *LoginRequest)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SystemName = v
}
  return nil
}

func (p *LoginRequest)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *LoginRequest)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *LoginRequest)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Secret = v
}
  return nil
}

func (p *LoginRequest)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.E2eeVersion = v
}
  return nil
}

func (p *LoginRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LoginRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *LoginRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityProvider", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityProvider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityProvider: ", p), err) }
  return err
}

func (p *LoginRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identifier: ", p), err) }
  return err
}

func (p *LoginRequest) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "password", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:password: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:password: ", p), err) }
  return err
}

func (p *LoginRequest) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "keepLoggedIn", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keepLoggedIn: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.KeepLoggedIn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keepLoggedIn (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keepLoggedIn: ", p), err) }
  return err
}

func (p *LoginRequest) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accessLocation", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:accessLocation: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AccessLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accessLocation (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:accessLocation: ", p), err) }
  return err
}

func (p *LoginRequest) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:systemName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:systemName: ", p), err) }
  return err
}

func (p *LoginRequest) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "certificate", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:certificate: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:certificate: ", p), err) }
  return err
}

func (p *LoginRequest) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:verifier: ", p), err) }
  return err
}

func (p *LoginRequest) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "secret", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:secret: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Secret); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.secret (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:secret: ", p), err) }
  return err
}

func (p *LoginRequest) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "e2eeVersion", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:e2eeVersion: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.E2eeVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.e2eeVersion (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:e2eeVersion: ", p), err) }
  return err
}

func (p *LoginRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginRequest(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Method
//  - Callback
//  - NormalizedPhone
//  - CountryCode
//  - NationalSignificantNumber
//  - AvailableVerificationMethods
//  - CallerIdMask
type VerificationSessionData struct {
  SessionId string `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Method VerificationMethod `thrift:"method,2" db:"method" json:"method"`
  Callback string `thrift:"callback,3" db:"callback" json:"callback"`
  NormalizedPhone string `thrift:"normalizedPhone,4" db:"normalizedPhone" json:"normalizedPhone"`
  CountryCode string `thrift:"countryCode,5" db:"countryCode" json:"countryCode"`
  NationalSignificantNumber string `thrift:"nationalSignificantNumber,6" db:"nationalSignificantNumber" json:"nationalSignificantNumber"`
  AvailableVerificationMethods []VerificationMethod `thrift:"availableVerificationMethods,7" db:"availableVerificationMethods" json:"availableVerificationMethods"`
  CallerIdMask string `thrift:"callerIdMask,8" db:"callerIdMask" json:"callerIdMask"`
}

func NewVerificationSessionData() *VerificationSessionData {
  return &VerificationSessionData{}
}


func (p *VerificationSessionData) GetSessionId() string {
  return p.SessionId
}

func (p *VerificationSessionData) GetMethod() VerificationMethod {
  return p.Method
}

func (p *VerificationSessionData) GetCallback() string {
  return p.Callback
}

func (p *VerificationSessionData) GetNormalizedPhone() string {
  return p.NormalizedPhone
}

func (p *VerificationSessionData) GetCountryCode() string {
  return p.CountryCode
}

func (p *VerificationSessionData) GetNationalSignificantNumber() string {
  return p.NationalSignificantNumber
}

func (p *VerificationSessionData) GetAvailableVerificationMethods() []VerificationMethod {
  return p.AvailableVerificationMethods
}

func (p *VerificationSessionData) GetCallerIdMask() string {
  return p.CallerIdMask
}
func (p *VerificationSessionData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerificationSessionData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := VerificationMethod(v)
  p.Method = temp
}
  return nil
}

func (p *VerificationSessionData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Callback = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NormalizedPhone = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NationalSignificantNumber = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]VerificationMethod, 0, size)
  p.AvailableVerificationMethods =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 VerificationMethod
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := VerificationMethod(v)
    _elem0 = temp
}
    p.AvailableVerificationMethods = append(p.AvailableVerificationMethods, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VerificationSessionData)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CallerIdMask = v
}
  return nil
}

func (p *VerificationSessionData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "VerificationSessionData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerificationSessionData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "callback", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:callback: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Callback)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callback (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:callback: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "normalizedPhone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:normalizedPhone: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NormalizedPhone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.normalizedPhone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:normalizedPhone: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "countryCode", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:countryCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:countryCode: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "nationalSignificantNumber", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nationalSignificantNumber: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NationalSignificantNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nationalSignificantNumber (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nationalSignificantNumber: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "availableVerificationMethods", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:availableVerificationMethods: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.AvailableVerificationMethods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AvailableVerificationMethods {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:availableVerificationMethods: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "callerIdMask", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:callerIdMask: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.CallerIdMask)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callerIdMask (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:callerIdMask: ", p), err) }
  return err
}

func (p *VerificationSessionData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerificationSessionData(%+v)", *p)
}

// Attributes:
//  - AccessToken
//  - RefreshToken
//  - AppId
//  - DurationUntilRefreshInSec
type TokenIssueResult_ struct {
  AccessToken string `thrift:"accessToken,1" db:"accessToken" json:"accessToken"`
  RefreshToken string `thrift:"refreshToken,2" db:"refreshToken" json:"refreshToken"`
  AppId string `thrift:"appId,3" db:"appId" json:"appId"`
  DurationUntilRefreshInSec int64 `thrift:"durationUntilRefreshInSec,4" db:"durationUntilRefreshInSec" json:"durationUntilRefreshInSec"`
}

func NewTokenIssueResult_() *TokenIssueResult_ {
  return &TokenIssueResult_{}
}


func (p *TokenIssueResult_) GetAccessToken() string {
  return p.AccessToken
}

func (p *TokenIssueResult_) GetRefreshToken() string {
  return p.RefreshToken
}

func (p *TokenIssueResult_) GetAppId() string {
  return p.AppId
}

func (p *TokenIssueResult_) GetDurationUntilRefreshInSec() int64 {
  return p.DurationUntilRefreshInSec
}
func (p *TokenIssueResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TokenIssueResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AccessToken = v
}
  return nil
}

func (p *TokenIssueResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RefreshToken = v
}
  return nil
}

func (p *TokenIssueResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TokenIssueResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DurationUntilRefreshInSec = v
}
  return nil
}

func (p *TokenIssueResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TokenIssueResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TokenIssueResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "accessToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:accessToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accessToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:accessToken: ", p), err) }
  return err
}

func (p *TokenIssueResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refreshToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:refreshToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefreshToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refreshToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:refreshToken: ", p), err) }
  return err
}

func (p *TokenIssueResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appId: ", p), err) }
  return err
}

func (p *TokenIssueResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "durationUntilRefreshInSec", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:durationUntilRefreshInSec: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.DurationUntilRefreshInSec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.durationUntilRefreshInSec (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:durationUntilRefreshInSec: ", p), err) }
  return err
}

func (p *TokenIssueResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TokenIssueResult_(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - Certificate
//  - Verifier
//  - PinCode
//  - Type
//  - LastPrimaryBindTime
//  - DisplayMessage
//  - SessionForSMSConfirm
//  - TokenIssueResult_
type LoginResult_ struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  Certificate string `thrift:"certificate,2" db:"certificate" json:"certificate"`
  Verifier string `thrift:"verifier,3" db:"verifier" json:"verifier"`
  PinCode string `thrift:"pinCode,4" db:"pinCode" json:"pinCode"`
  Type LoginResultType `thrift:"type,5" db:"type" json:"type"`
  LastPrimaryBindTime int64 `thrift:"lastPrimaryBindTime,6" db:"lastPrimaryBindTime" json:"lastPrimaryBindTime"`
  DisplayMessage string `thrift:"displayMessage,7" db:"displayMessage" json:"displayMessage"`
  SessionForSMSConfirm *VerificationSessionData `thrift:"sessionForSMSConfirm,8" db:"sessionForSMSConfirm" json:"sessionForSMSConfirm"`
  TokenIssueResult_ *TokenIssueResult_ `thrift:"tokenIssueResult,9" db:"tokenIssueResult" json:"tokenIssueResult"`
}

func NewLoginResult_() *LoginResult_ {
  return &LoginResult_{}
}


func (p *LoginResult_) GetAuthToken() string {
  return p.AuthToken
}

func (p *LoginResult_) GetCertificate() string {
  return p.Certificate
}

func (p *LoginResult_) GetVerifier() string {
  return p.Verifier
}

func (p *LoginResult_) GetPinCode() string {
  return p.PinCode
}

func (p *LoginResult_) GetType() LoginResultType {
  return p.Type
}

func (p *LoginResult_) GetLastPrimaryBindTime() int64 {
  return p.LastPrimaryBindTime
}

func (p *LoginResult_) GetDisplayMessage() string {
  return p.DisplayMessage
}
var LoginResult__SessionForSMSConfirm_DEFAULT *VerificationSessionData
func (p *LoginResult_) GetSessionForSMSConfirm() *VerificationSessionData {
  if !p.IsSetSessionForSMSConfirm() {
    return LoginResult__SessionForSMSConfirm_DEFAULT
  }
return p.SessionForSMSConfirm
}
var LoginResult__TokenIssueResult__DEFAULT *TokenIssueResult_
func (p *LoginResult_) GetTokenIssueResult_() *TokenIssueResult_ {
  if !p.IsSetTokenIssueResult_() {
    return LoginResult__TokenIssueResult__DEFAULT
  }
return p.TokenIssueResult_
}
func (p *LoginResult_) IsSetSessionForSMSConfirm() bool {
  return p.SessionForSMSConfirm != nil
}

func (p *LoginResult_) IsSetTokenIssueResult_() bool {
  return p.TokenIssueResult_ != nil
}

func (p *LoginResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LoginResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *LoginResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *LoginResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *LoginResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *LoginResult_)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := LoginResultType(v)
  p.Type = temp
}
  return nil
}

func (p *LoginResult_)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastPrimaryBindTime = v
}
  return nil
}

func (p *LoginResult_)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DisplayMessage = v
}
  return nil
}

func (p *LoginResult_)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.SessionForSMSConfirm = &VerificationSessionData{}
  if err := p.SessionForSMSConfirm.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionForSMSConfirm), err)
  }
  return nil
}

func (p *LoginResult_)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.TokenIssueResult_ = &TokenIssueResult_{}
  if err := p.TokenIssueResult_.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TokenIssueResult_), err)
  }
  return nil
}

func (p *LoginResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LoginResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LoginResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *LoginResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "certificate", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:certificate: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:certificate: ", p), err) }
  return err
}

func (p *LoginResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:verifier: ", p), err) }
  return err
}

func (p *LoginResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pinCode", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pinCode: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pinCode: ", p), err) }
  return err
}

func (p *LoginResult_) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err) }
  return err
}

func (p *LoginResult_) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lastPrimaryBindTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastPrimaryBindTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LastPrimaryBindTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastPrimaryBindTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastPrimaryBindTime: ", p), err) }
  return err
}

func (p *LoginResult_) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayMessage", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:displayMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayMessage (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:displayMessage: ", p), err) }
  return err
}

func (p *LoginResult_) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sessionForSMSConfirm", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sessionForSMSConfirm: ", p), err) }
  if err := p.SessionForSMSConfirm.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionForSMSConfirm), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sessionForSMSConfirm: ", p), err) }
  return err
}

func (p *LoginResult_) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tokenIssueResult", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:tokenIssueResult: ", p), err) }
  if err := p.TokenIssueResult_.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TokenIssueResult_), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:tokenIssueResult: ", p), err) }
  return err
}

func (p *LoginResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LoginResult_(%+v)", *p)
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type TalkException struct {
  Code ErrorCode `thrift:"code,1" db:"code" json:"code"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
  ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewTalkException() *TalkException {
  return &TalkException{}
}


func (p *TalkException) GetCode() ErrorCode {
  return p.Code
}

func (p *TalkException) GetReason() string {
  return p.Reason
}

func (p *TalkException) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *TalkException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *TalkException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *TalkException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
var _val2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val2 = v
}
    p.ParameterMap[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TalkException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TalkException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *TalkException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(ctx, string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(ctx); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *TalkException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
  return p.String()
}

type TalkService interface {
  // Parameters:
  //  - Provider
  GetRSAKeyInfo(ctx context.Context, provider IdentityProvider) (r *RSAKey, err error)
  // Parameters:
  //  - Provider
  //  - Identifier
  //  - Locale
  RequestAccountPasswordReset(ctx context.Context, provider IdentityProvider, identifier string, locale string) (err error)
}

type TalkServiceClient struct {
  c thrift.TClient
}

func NewTalkServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TalkServiceClient {
  return &TalkServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTalkServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TalkServiceClient {
  return &TalkServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTalkServiceClient(c thrift.TClient) *TalkServiceClient {
  return &TalkServiceClient{
    c: c,
  }
}

func (p *TalkServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Provider
func (p *TalkServiceClient) GetRSAKeyInfo(ctx context.Context, provider IdentityProvider) (r *RSAKey, err error) {
  var _args3 TalkServiceGetRSAKeyInfoArgs
  _args3.Provider = provider
  var _result4 TalkServiceGetRSAKeyInfoResult
  if err = p.Client_().Call(ctx, "getRSAKeyInfo", &_args3, &_result4); err != nil {
    return
  }
  switch {
  case _result4.E!= nil:
    return r, _result4.E
  }

  return _result4.GetSuccess(), nil
}

// Parameters:
//  - Provider
//  - Identifier
//  - Locale
func (p *TalkServiceClient) RequestAccountPasswordReset(ctx context.Context, provider IdentityProvider, identifier string, locale string) (err error) {
  var _args5 TalkServiceRequestAccountPasswordResetArgs
  _args5.Provider = provider
  _args5.Identifier = identifier
  _args5.Locale = locale
  var _result6 TalkServiceRequestAccountPasswordResetResult
  if err = p.Client_().Call(ctx, "requestAccountPasswordReset", &_args5, &_result6); err != nil {
    return
  }
  switch {
  case _result6.E!= nil:
    return _result6.E
  }

  return nil
}

type TalkServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TalkService
}

func (p *TalkServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TalkServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TalkServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTalkServiceProcessor(handler TalkService) *TalkServiceProcessor {

  self7 := &TalkServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self7.processorMap["getRSAKeyInfo"] = &talkServiceProcessorGetRSAKeyInfo{handler:handler}
  self7.processorMap["requestAccountPasswordReset"] = &talkServiceProcessorRequestAccountPasswordReset{handler:handler}
return self7
}

func (p *TalkServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin(ctx)
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x8 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x8.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x8

}

type talkServiceProcessorGetRSAKeyInfo struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRSAKeyInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRSAKeyInfoArgs{}
  if err = args.Read(ctx, iprot); err != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin(ctx, "getRSAKeyInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, err
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceGetRSAKeyInfoResult{}
  var retval *RSAKey
  var err2 error
  if retval, err2 = p.handler.GetRSAKeyInfo(ctx, args.Provider); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, err2
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRSAKeyInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRSAKeyInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRSAKeyInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRequestAccountPasswordReset struct {
  handler TalkService
}

func (p *talkServiceProcessorRequestAccountPasswordReset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRequestAccountPasswordResetArgs{}
  if err = args.Read(ctx, iprot); err != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, err
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TalkServiceRequestAccountPasswordResetResult{}
  var err2 error
  if err2 = p.handler.RequestAccountPasswordReset(ctx, args.Provider, args.Identifier, args.Locale); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, err2
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestAccountPasswordReset: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, err2
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "requestAccountPasswordReset", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Provider
type TalkServiceGetRSAKeyInfoArgs struct {
  // unused field # 1
  Provider IdentityProvider `thrift:"provider,2" db:"provider" json:"provider"`
}

func NewTalkServiceGetRSAKeyInfoArgs() *TalkServiceGetRSAKeyInfoArgs {
  return &TalkServiceGetRSAKeyInfoArgs{}
}


func (p *TalkServiceGetRSAKeyInfoArgs) GetProvider() IdentityProvider {
  return p.Provider
}
func (p *TalkServiceGetRSAKeyInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRSAKeyInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:provider: ", p), err) }
  return err
}

func (p *TalkServiceGetRSAKeyInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRSAKeyInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRSAKeyInfoResult struct {
  Success *RSAKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRSAKeyInfoResult() *TalkServiceGetRSAKeyInfoResult {
  return &TalkServiceGetRSAKeyInfoResult{}
}

var TalkServiceGetRSAKeyInfoResult_Success_DEFAULT *RSAKey
func (p *TalkServiceGetRSAKeyInfoResult) GetSuccess() *RSAKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetRSAKeyInfoResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRSAKeyInfoResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRSAKeyInfoResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRSAKeyInfoResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRSAKeyInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRSAKeyInfoResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRSAKeyInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &RSAKey{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRSAKeyInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRSAKeyInfoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRSAKeyInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRSAKeyInfoResult(%+v)", *p)
}

// Attributes:
//  - Provider
//  - Identifier
//  - Locale
type TalkServiceRequestAccountPasswordResetArgs struct {
  // unused field # 1
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  // unused field # 3
  Provider IdentityProvider `thrift:"provider,4" db:"provider" json:"provider"`
  Locale string `thrift:"locale,5" db:"locale" json:"locale"`
}

func NewTalkServiceRequestAccountPasswordResetArgs() *TalkServiceRequestAccountPasswordResetArgs {
  return &TalkServiceRequestAccountPasswordResetArgs{}
}


func (p *TalkServiceRequestAccountPasswordResetArgs) GetProvider() IdentityProvider {
  return p.Provider
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetIdentifier() string {
  return p.Identifier
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetLocale() string {
  return p.Locale
}
func (p *TalkServiceRequestAccountPasswordResetArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestAccountPasswordReset_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "provider", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:provider: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:provider: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "locale", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:locale: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:locale: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestAccountPasswordResetArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRequestAccountPasswordResetResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRequestAccountPasswordResetResult() *TalkServiceRequestAccountPasswordResetResult {
  return &TalkServiceRequestAccountPasswordResetResult{}
}

var TalkServiceRequestAccountPasswordResetResult_E_DEFAULT *TalkException
func (p *TalkServiceRequestAccountPasswordResetResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRequestAccountPasswordResetResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRequestAccountPasswordResetResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "requestAccountPasswordReset_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestAccountPasswordResetResult(%+v)", *p)
}


type AuthService interface {
  // Parameters:
  //  - Verifier
  //  - DeviceSecret
  ConfirmE2EELogin(ctx context.Context, verifier string, deviceSecret []byte) (r string, err error)
  // Parameters:
  //  - LoginRequest
  LoginZ(ctx context.Context, loginRequest *LoginRequest) (r *LoginResult_, err error)
  LogoutZ(ctx context.Context) (err error)
}

type AuthServiceClient struct {
  c thrift.TClient
}

func NewAuthServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AuthServiceClient {
  return &AuthServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewAuthServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AuthServiceClient {
  return &AuthServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewAuthServiceClient(c thrift.TClient) *AuthServiceClient {
  return &AuthServiceClient{
    c: c,
  }
}

func (p *AuthServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Verifier
//  - DeviceSecret
func (p *AuthServiceClient) ConfirmE2EELogin(ctx context.Context, verifier string, deviceSecret []byte) (r string, err error) {
  var _args11 AuthServiceConfirmE2EELoginArgs
  _args11.Verifier = verifier
  _args11.DeviceSecret = deviceSecret
  var _result12 AuthServiceConfirmE2EELoginResult
  if err = p.Client_().Call(ctx, "confirmE2EELogin", &_args11, &_result12); err != nil {
    return
  }
  switch {
  case _result12.E!= nil:
    return r, _result12.E
  }

  return _result12.GetSuccess(), nil
}

// Parameters:
//  - LoginRequest
func (p *AuthServiceClient) LoginZ(ctx context.Context, loginRequest *LoginRequest) (r *LoginResult_, err error) {
  var _args13 AuthServiceLoginZArgs
  _args13.LoginRequest = loginRequest
  var _result14 AuthServiceLoginZResult
  if err = p.Client_().Call(ctx, "loginZ", &_args13, &_result14); err != nil {
    return
  }
  switch {
  case _result14.E!= nil:
    return r, _result14.E
  }

  return _result14.GetSuccess(), nil
}

func (p *AuthServiceClient) LogoutZ(ctx context.Context) (err error) {
  var _args15 AuthServiceLogoutZArgs
  var _result16 AuthServiceLogoutZResult
  if err = p.Client_().Call(ctx, "logoutZ", &_args15, &_result16); err != nil {
    return
  }
  switch {
  case _result16.E!= nil:
    return _result16.E
  }

  return nil
}

type AuthServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler AuthService
}

func (p *AuthServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *AuthServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *AuthServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewAuthServiceProcessor(handler AuthService) *AuthServiceProcessor {

  self17 := &AuthServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self17.processorMap["confirmE2EELogin"] = &authServiceProcessorConfirmE2EELogin{handler:handler}
  self17.processorMap["loginZ"] = &authServiceProcessorLoginZ{handler:handler}
  self17.processorMap["logoutZ"] = &authServiceProcessorLogoutZ{handler:handler}
return self17
}

func (p *AuthServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin(ctx)
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x18 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x18.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x18

}

type authServiceProcessorConfirmE2EELogin struct {
  handler AuthService
}

func (p *authServiceProcessorConfirmE2EELogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceConfirmE2EELoginArgs{}
  if err = args.Read(ctx, iprot); err != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin(ctx, "confirmE2EELogin", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, err
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceConfirmE2EELoginResult{}
  var retval string
  var err2 error
  if retval, err2 = p.handler.ConfirmE2EELogin(ctx, args.Verifier, args.DeviceSecret); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, err2
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing confirmE2EELogin: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "confirmE2EELogin", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "confirmE2EELogin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorLoginZ struct {
  handler AuthService
}

func (p *authServiceProcessorLoginZ) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceLoginZArgs{}
  if err = args.Read(ctx, iprot); err != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin(ctx, "loginZ", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, err
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceLoginZResult{}
  var retval *LoginResult_
  var err2 error
  if retval, err2 = p.handler.LoginZ(ctx, args.LoginRequest); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, err2
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing loginZ: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "loginZ", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "loginZ", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type authServiceProcessorLogoutZ struct {
  handler AuthService
}

func (p *authServiceProcessorLogoutZ) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AuthServiceLogoutZArgs{}
  if err = args.Read(ctx, iprot); err != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin(ctx, "logoutZ", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, err
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := AuthServiceLogoutZResult{}
  var err2 error
  if err2 = p.handler.LogoutZ(ctx); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, err2
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing logoutZ: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "logoutZ", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, err2
  }
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "logoutZ", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Verifier
//  - DeviceSecret
type AuthServiceConfirmE2EELoginArgs struct {
  Verifier string `thrift:"verifier,1" db:"verifier" json:"verifier"`
  DeviceSecret []byte `thrift:"deviceSecret,2" db:"deviceSecret" json:"deviceSecret"`
}

func NewAuthServiceConfirmE2EELoginArgs() *AuthServiceConfirmE2EELoginArgs {
  return &AuthServiceConfirmE2EELoginArgs{}
}


func (p *AuthServiceConfirmE2EELoginArgs) GetVerifier() string {
  return p.Verifier
}

func (p *AuthServiceConfirmE2EELoginArgs) GetDeviceSecret() []byte {
  return p.DeviceSecret
}
func (p *AuthServiceConfirmE2EELoginArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceConfirmE2EELoginArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *AuthServiceConfirmE2EELoginArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeviceSecret = v
}
  return nil
}

func (p *AuthServiceConfirmE2EELoginArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "confirmE2EELogin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceConfirmE2EELoginArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "verifier", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:verifier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:verifier: ", p), err) }
  return err
}

func (p *AuthServiceConfirmE2EELoginArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceSecret", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceSecret: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.DeviceSecret); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceSecret (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceSecret: ", p), err) }
  return err
}

func (p *AuthServiceConfirmE2EELoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceConfirmE2EELoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceConfirmE2EELoginResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceConfirmE2EELoginResult() *AuthServiceConfirmE2EELoginResult {
  return &AuthServiceConfirmE2EELoginResult{}
}

var AuthServiceConfirmE2EELoginResult_Success_DEFAULT string
func (p *AuthServiceConfirmE2EELoginResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return AuthServiceConfirmE2EELoginResult_Success_DEFAULT
  }
return *p.Success
}
var AuthServiceConfirmE2EELoginResult_E_DEFAULT *TalkException
func (p *AuthServiceConfirmE2EELoginResult) GetE() *TalkException {
  if !p.IsSetE() {
    return AuthServiceConfirmE2EELoginResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceConfirmE2EELoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceConfirmE2EELoginResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceConfirmE2EELoginResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceConfirmE2EELoginResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *AuthServiceConfirmE2EELoginResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceConfirmE2EELoginResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "confirmE2EELogin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceConfirmE2EELoginResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceConfirmE2EELoginResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceConfirmE2EELoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceConfirmE2EELoginResult(%+v)", *p)
}

// Attributes:
//  - LoginRequest
type AuthServiceLoginZArgs struct {
  // unused field # 1
  LoginRequest *LoginRequest `thrift:"loginRequest,2" db:"loginRequest" json:"loginRequest"`
}

func NewAuthServiceLoginZArgs() *AuthServiceLoginZArgs {
  return &AuthServiceLoginZArgs{}
}

var AuthServiceLoginZArgs_LoginRequest_DEFAULT *LoginRequest
func (p *AuthServiceLoginZArgs) GetLoginRequest() *LoginRequest {
  if !p.IsSetLoginRequest() {
    return AuthServiceLoginZArgs_LoginRequest_DEFAULT
  }
return p.LoginRequest
}
func (p *AuthServiceLoginZArgs) IsSetLoginRequest() bool {
  return p.LoginRequest != nil
}

func (p *AuthServiceLoginZArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceLoginZArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.LoginRequest = &LoginRequest{}
  if err := p.LoginRequest.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LoginRequest), err)
  }
  return nil
}

func (p *AuthServiceLoginZArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "loginZ_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceLoginZArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "loginRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginRequest: ", p), err) }
  if err := p.LoginRequest.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LoginRequest), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginRequest: ", p), err) }
  return err
}

func (p *AuthServiceLoginZArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceLoginZArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type AuthServiceLoginZResult struct {
  Success *LoginResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceLoginZResult() *AuthServiceLoginZResult {
  return &AuthServiceLoginZResult{}
}

var AuthServiceLoginZResult_Success_DEFAULT *LoginResult_
func (p *AuthServiceLoginZResult) GetSuccess() *LoginResult_ {
  if !p.IsSetSuccess() {
    return AuthServiceLoginZResult_Success_DEFAULT
  }
return p.Success
}
var AuthServiceLoginZResult_E_DEFAULT *TalkException
func (p *AuthServiceLoginZResult) GetE() *TalkException {
  if !p.IsSetE() {
    return AuthServiceLoginZResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceLoginZResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AuthServiceLoginZResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceLoginZResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceLoginZResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &LoginResult_{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AuthServiceLoginZResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceLoginZResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "loginZ_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceLoginZResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AuthServiceLoginZResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceLoginZResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceLoginZResult(%+v)", *p)
}

type AuthServiceLogoutZArgs struct {
}

func NewAuthServiceLogoutZArgs() *AuthServiceLogoutZArgs {
  return &AuthServiceLogoutZArgs{}
}

func (p *AuthServiceLogoutZArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceLogoutZArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "logoutZ_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceLogoutZArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceLogoutZArgs(%+v)", *p)
}

// Attributes:
//  - E
type AuthServiceLogoutZResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewAuthServiceLogoutZResult() *AuthServiceLogoutZResult {
  return &AuthServiceLogoutZResult{}
}

var AuthServiceLogoutZResult_E_DEFAULT *TalkException
func (p *AuthServiceLogoutZResult) GetE() *TalkException {
  if !p.IsSetE() {
    return AuthServiceLogoutZResult_E_DEFAULT
  }
return p.E
}
func (p *AuthServiceLogoutZResult) IsSetE() bool {
  return p.E != nil
}

func (p *AuthServiceLogoutZResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AuthServiceLogoutZResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *AuthServiceLogoutZResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "logoutZ_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AuthServiceLogoutZResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin(ctx, "e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *AuthServiceLogoutZResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AuthServiceLogoutZResult(%+v)", *p)
}


